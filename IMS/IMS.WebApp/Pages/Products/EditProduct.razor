@page "/editproduct/{id:int}"
@inject IViewProductByIdUseCase ViewProductByIdUseCase
@inject IEditProductUseCase EditProductUseCase
@inject NavigationManager NavigationManager

@attribute [Authorize]

<h3>Edit Product</h3>
<br />

@if(_product is not null)
{
    <EditForm Model="_product" OnValidSubmit="OnValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label for="name">Product Name</label>
            <InputText id="name" @bind-Value="_product.ProductName" class="form-control" />
        </div>
        <div class="form-group">
            <label for="qty">Quantity</label>
            <InputNumber id="name" @bind-Value="_product.Quantity" class="form-control" />
        </div>
        <div class="form-group">
            <label for="price">Price</label>
            <InputNumber id="price" @bind-Value="_product.Price" class="form-control" />
        </div>

        <ProductInventoriesComponent
            ProductInventories="_product.ProductInventories"
            OnInventorySelected="OnInventorySelected" />

        <br />
        <button type="submit" class="btn btn-primary">Save</button>
    </EditForm>
}

@code {
    [Parameter]
    public int Id { get; set; }

    private Product? _product;

    protected override async Task OnParametersSetAsync()
    {
        _product = await ViewProductByIdUseCase.ExecuteAsync(Id);
    }

    private void OnInventorySelected(List<ProductInventory> productInventories)
    {
        _product.ProductInventories = productInventories;
    }

    private async Task OnValidSubmit()
    {
        await EditProductUseCase.ExecuteAsync(_product);
        NavigationManager.NavigateTo("products");
    }
}
